#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const mongoose = require('mongoose');
const redis = require('redis');
const client = redis.createClient();

/**
 * Listen on provided port, on all network interfaces.
 */
client.on("connect", ()=> {
  console.log("Connected redis server!");
});
client.once('error', (err)=> {
  console.error('Connect redis error:',err);
  process.exit(1);
});
mongoose.connection.once('error', ()=> {
  console.error('Connect mongodb error:',err);
  process.exit(1);
})
mongoose.connect('mongodb://localhost:27017/checker', { useNewUrlParser: true }, (error) => {
  if (error) return console.error('Connect mongodb error:', error);
  console.log('Connected mongodb server!');
  server.listen(port, (error) => {
    if (error) return console.error('Start webserver on port',port,'error:',error);
    console.log('Started webserver on port', port);
  });
  server.on('error', onError);
  server.on('listening', onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
